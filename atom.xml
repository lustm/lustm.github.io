<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://lustm.github.io/atom.xml" rel="self"/>
  
  <link href="https://lustm.github.io/"/>
  <updated>2021-12-29T07:55:16.183Z</updated>
  <id>https://lustm.github.io/</id>
  
  <author>
    <name>Lustm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch集群容错机制</title>
    <link href="https://lustm.github.io/2021/12/29/Elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6/"/>
    <id>https://lustm.github.io/2021/12/29/Elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6/</id>
    <published>2021-12-29T15:33:43.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、关于横向扩容"><a href="#一、关于横向扩容" class="headerlink" title="一、关于横向扩容"></a>一、关于横向扩容</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;number_of_shards&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;number_of_replicas&quot;</span> : <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>primary&amp;replica自动负载均衡，6个shard，3 primary，3 replica</li><li>每个node有更少的shard，IO/CPU/Memory资源给每个shard分配更多，每个shard性能更好</li><li>扩容的极限，6个shard（3 primary，3 replica），最多扩容到6台机器，每个shard可以占用单台服务器的所有资源，性能最好</li><li>超出扩容极限，动态修改replica数量，9个shard（3primary，6 replica），扩容到9台机器，比3台机器时，拥有3倍的读吞吐量</li><li>3台机器下，9个shard（3 primary，6 replica），资源更少，但是容错性更好，最多容纳2台机器宕机，6个shard只能容纳1台机器宕机</li></ul><p><font color=Red>在3台机器下，6个shard的只能容纳1台机器宕机容错性分析：</font></p><p><img src="https://raw.githubusercontent.com/lustm/IMG/main/images/616011-20190109112734231-1661512252.png" alt="IMG"></p><h3 id="二、关于Master节点"><a href="#二、关于Master节点" class="headerlink" title="二、关于Master节点"></a>二、关于Master节点</h3><ul><li><p>master节点不会承载所有的请求，所以不会是一个单点瓶颈</p></li><li><p>master节点管理es集群的元数据：比如说索引的创建和删除，维护索引的元数据，节点的增加和移除，维护集群的元数据</p></li><li><p>默认情况下，会自动选择出一台节点，作为master节点</p></li></ul><p><font color=Red>容错性分析: </font></p><p><img src="https://raw.githubusercontent.com/lustm/IMG/main/images/616011-20190109114535438-1911620532.png" alt="IMG"></p><h3 id="三、关于纵向扩容"><a href="#三、关于纵向扩容" class="headerlink" title="三、关于纵向扩容"></a>三、关于纵向扩容</h3><p>扩容方案：重新购置两台性能更加强大，替换原先旧的2台服务器，但是，服务器的性能越强，成本将会是成倍增加，此方案不推荐，一般用横向扩容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、关于横向扩容&quot;&gt;&lt;a href=&quot;#一、关于横向扩容&quot; class=&quot;headerlink&quot; title=&quot;一、关于横向扩容&quot;&gt;&lt;/a&gt;一、关于横向扩容&lt;/h3&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>几个常用ES查询命令</title>
    <link href="https://lustm.github.io/2021/12/29/%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8ES%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/"/>
    <id>https://lustm.github.io/2021/12/29/%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8ES%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</id>
    <published>2021-12-29T09:09:10.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看ES版本"><a href="#查看ES版本" class="headerlink" title="查看ES版本"></a>查看ES版本</h3><blockquote><p>curl -XGET -u “username:password” -H “Content-Type: application/json” ip:port</p></blockquote><h3 id="查看索引列表"><a href="#查看索引列表" class="headerlink" title="查看索引列表"></a>查看索引列表</h3><blockquote><p>curl -XGET -u “username:password” -H “Content-Type: application/json” ip:port/_cat/indices</p></blockquote><h3 id="查看settings配置"><a href="#查看settings配置" class="headerlink" title="查看settings配置"></a>查看settings配置</h3><blockquote><p>curl -XGET -u “username:password” -H “Content-Type: application/json” ip:port/index_name/_settings</p></blockquote><h3 id="查看mapping结构"><a href="#查看mapping结构" class="headerlink" title="查看mapping结构"></a>查看mapping结构</h3><blockquote><p>curl -XGET -u “username:password” -H “Content-Type: application/json” ip:port/index_name</p></blockquote><h3 id="查询索引数据-source代表查询的字段"><a href="#查询索引数据-source代表查询的字段" class="headerlink" title="查询索引数据 _source代表查询的字段"></a>查询索引数据 _source代表查询的字段</h3><blockquote><p>curl -XGET -u “username:password” -H “Content-Type: application/json” ip:port/index_name/_search -d</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;should&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;term&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;employee_ldap&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;value&quot;</span>:<span class="string">&quot;guilhermepacheco1&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;from&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data_source&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mdata_create_time&quot;</span>,</span><br><span class="line">        <span class="string">&quot;employee_ldap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hr_status&quot;</span>,</span><br><span class="line">        <span class="string">&quot;employee_name&quot;</span>,</span><br><span class="line">        <span class="string">&quot;employee_ldap&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="清空索引里的所有数据"><a href="#清空索引里的所有数据" class="headerlink" title="清空索引里的所有数据"></a>清空索引里的所有数据</h3><blockquote><p>curl -XPOST -u “username:password” -H “Content-Type:application/json” ip:port/index_name/_delete_by_query -d </p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span>:&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><blockquote><p>curl -XDELETE ip:port/index_name</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查看ES版本&quot;&gt;&lt;a href=&quot;#查看ES版本&quot; class=&quot;headerlink&quot; title=&quot;查看ES版本&quot;&gt;&lt;/a&gt;查看ES版本&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;curl -XGET -u “username:password” -H “Con</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    <category term="命令" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Ik-analyzer的安装使用、自定义词库以及热更新方案</title>
    <link href="https://lustm.github.io/2021/12/23/Ik-analyzer%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%83%AD%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://lustm.github.io/2021/12/23/Ik-analyzer%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%BA%93%E4%BB%A5%E5%8F%8A%E7%83%AD%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88/</id>
    <published>2021-12-23T15:29:14.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面的案例使用standard、english分词器，是英文原生的分词器，对中文分词支持不太好。中文作为全球最优美、最复杂的语言，目前中文分词器较多，ik-analyzer、结巴中文分词、THULAC、NLPIR和阿里的aliws都是非常优秀的，我们以ik-analyzer作为讲解的重点，其它分词器可以举一反三。</p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>本篇主要介绍中文分词器ik-analyzer的安装使用、自定义词库以及热更新方案。</p><h3 id="分词器插件安装"><a href="#分词器插件安装" class="headerlink" title="分词器插件安装"></a>分词器插件安装</h3><p>我们Elasticsearch 6.3.1版本为例，集成IK分词器，其他的分词器过程也类似，在ES的bin目录下执行插件安装命令即可：</p><p><code>./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.1/elasticsearch-analysis-ik-6.3.1.zip</code></p><p>其中install后面的那个的地址是 <a href="medcl/elasticsearch-analysis-ik">elasticsearch-analysis-ik</a> 的github release对应ES版本的下载地址。</p><p>插件的版本最好与Elasticsearch版本保持一致，如果Elasticsearch为别的版本，下载对应版本的ik-analyzer插件即可。</p><p>安装成功后，ES启动日志就能看到如下信息：</p><p><code>[2019-11-27T12:17:15,255][INFO ][o.e.p.PluginsService] [node-1] loaded plugin [analysis-ik]</code></p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>IK分词器包含两种analyzer，一般用ik_max_word</p><p>ik_max_word：会将文本做最细粒度的拆分</p><p>ik_smart：会做最粗粒度的拆分</p><p>测试分词效果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ik_max_word分词测试</span></span><br><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;text&quot;</span>: <span class="string">&quot;您好祖国&quot;</span>,</span><br><span class="line"><span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应如下：</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;tokens&quot;</span>: [ </span><br><span class="line">&#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;您好&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;祖国&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ik_max_word分词测试</span></span><br><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;我和我的祖国&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应如下：</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;我&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;和我&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;的&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;祖国&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>ik插件安装完成后，可以在<code>elasticsearch-6.3.1/config/analysis-ik</code>看到ik的配置文件IKAnalyzer.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该目录下带有许多文件，含义如下：</p><ul><li><p>main.dic ik 原生内置的中文词库，里面有275909条现成的词语</p></li><li><p>quantifier.dic 量词和单位名称，如个，斤，克，米之类的</p></li><li><p>suffix.dic 常见后缀词，如江，村，省，市，局等</p></li><li><p>surname.dic 中国姓氏</p></li><li><p>stopword.dic 停用词，目前默认的是写的几个英文单词，如and, a, the等</p></li><li><p>preposition.dic 副词、语气助词，连接词等无实际含义的词语，如却，也，是，否则之类的</p></li></ul><p>6.3.1版本的IK分词器还提供了额外的词库补充文件，extra开头的那几个就是，如extra_main.dic，共收录398716条现有的词语，默认没有使用，有需要可以在配置文件IKAnalyzer.cfg.xml上添加，其他类似。</p><p>最重要的是main.dic和stopword.dic。stopword(停用词)，分词时会直接被干掉，不会建立在倒排索引中。</p><h4 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h4><p>1）创建自定义词库文件mydic.dic，并在IKAnalyzer.cfg.xml的ext_dict属性里加上该文件名，可以在mydic.dic文件里补充自己的词汇，如网络流行词：跪族篮孩。</p><p>添加前的分词效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">GET /forum/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;跪族篮孩&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">响应结果：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;跪&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;族&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;篮&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;孩&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加词库后：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;跪族篮孩&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;跪&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;族&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;篮&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;孩&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能看到完整的“跪族篮孩”，能看到完整的语词出现。</p><p>2）自己建立停用词库，如了，的，哈，啥，这几个字不想去建立索引</p><p>在配置文件IKAnalyzer.cfg.xml下ext_stopwords标签添加：extra_stopword.dic，并加几个词，修改后同样要重启es。</p><p>例：加一个”啥”字在ext_stopword中</p><p>修改前：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET /forum/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;啥都好&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">响应结果：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;啥&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;都好&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加停用词后:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;都好&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那个啥字直接没有了，结果符合预期。</p><h3 id="热更新方案"><a href="#热更新方案" class="headerlink" title="热更新方案"></a>热更新方案</h3><p>上面自定义词库有一个致命问题：必须要重启ES，新增的词库才能生效。</p><p>研发、测试环境自己玩玩无所谓，多半是自己使用，节点又少，重启就重启，关系不大。但想想生产环境能随便让你重启吗？动辄几百个ES实例，重启的事就别想了，另外找办法。</p><p>由此引出现在的热更新需求，让ES不停机能立即加载新增的词库。</p><p>热更新的方案</p><ol><li><p>基于id分词器原生支持的更新方案，部署一个web服务器，提供一个http接口，通过modified和try两个http响应头，来提供词语的热更新操作。</p></li><li><p>修改ik分词器源码，然后手动支持从mysql中每隔一定时间，自动加载新的词库。</p></li></ol><p>推荐方案二，方案一虽是官方提供的，但操作起来比较麻烦，还需要部署http服务器。</p><p>方案步骤:</p><p>1）下载源码</p><p>git clone medcl/elasticsearch-analysis-ik</p><p>git checkout tags/v6.3.1</p><p>该工程是Maven项目工程，将代码导入IDEA或Eclipse。</p><p>2）修改点</p><p><code>org.wltea.analyzer.dic.Dictionary</code></p><p>主要思路是在这个类的initial()方法内增加一个入口，反复去调用reLoadMainDict()方法，此方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reLoadMainDict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;重新加载词典...&quot;</span>);</span><br><span class="line">    <span class="comment">// 新开一个实例加载词典，减少加载过程对当前词典使用的影响</span></span><br><span class="line">    Dictionary tmpDict = <span class="keyword">new</span> Dictionary(configuration);</span><br><span class="line">    tmpDict.configuration = getSingleton().configuration;</span><br><span class="line">    tmpDict.loadMainDict();</span><br><span class="line">    tmpDict.loadStopWordDict();</span><br><span class="line">    _MainDict = tmpDict._MainDict;</span><br><span class="line">    _StopWords = tmpDict._StopWords;</span><br><span class="line">    logger.info(<span class="string">&quot;重新加载词典完毕...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法就是重新加载词库的，然后修改loadMainDict()和loadStopWordDict()方法，在这两个方法最后加上读取数据库获取最新的数据记录的逻辑即可。数据库的表结构自己定义两张表，满足数据库表设计规范即可。</p><p>3）IDE上mvn package打包</p><p>可以直接用target/releases/目录下的elasticsearch-analysis-ik-6.3.1.zip</p><p>4）解压zip包，加上jdbc的配置，该修改的修改，重启ES，看日志</p><p>5）在数据库里加几个字段，在线尝试是否生效。</p><h5 id="方案延伸"><a href="#方案延伸" class="headerlink" title="方案延伸"></a>方案延伸</h5><p>该方案使用数据库轮询的方法，简单有效，但比较浪费资源，毕竟生产上修改词库的动作是按需求发生的，可以考虑由定时轮询改成MQ消息通知，这样就可以做到按需更新，而不用浪费太多的资源做词典更新。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本篇对中文分词器IK作了简单的讲解，市面上流行的中文分词器很多，如果我们遇到有中文分词的需求，货比三家是永远不过时的道理，调研可能要花费一些时间，但能挑到适合自己项目的分词器，还是划算的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前面的案例使用standard、english分词器，是英文原生的分词器，对中文分词支持不太好。中文作为全球最优美、最复杂的语言，目前中文分</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    <category term="分词器" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch可以替代NoSQL吗?</title>
    <link href="https://lustm.github.io/2021/12/21/Elasticsearch%E5%8F%AF%E4%BB%A5%E6%9B%BF%E4%BB%A3NoSQL%E5%90%97/"/>
    <id>https://lustm.github.io/2021/12/21/Elasticsearch%E5%8F%AF%E4%BB%A5%E6%9B%BF%E4%BB%A3NoSQL%E5%90%97/</id>
    <published>2021-12-21T17:12:10.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch可以替代NoSQL吗？"><a href="#Elasticsearch可以替代NoSQL吗？" class="headerlink" title="Elasticsearch可以替代NoSQL吗？"></a>Elasticsearch可以替代NoSQL吗？</h2><p>​   &nbsp;&nbsp; 首先，ES从发布第一个版本到现在只有短短几年时间，在很多方面还不成熟，开发的主力也只是一个很小规模的创业公司（<a href="https://link.zhihu.com/?target=https://www.elastic.co/">Elastic · Revealing Insights from Data (Formerly Elasticsearch)</a>）。而NoSQL是一个很宽泛的概念，无论是学术界还是工业界都已经讨论了很多年，也有很多成熟的产品（包括MongoDB），背后有诸多大公司及无数开发者。使用哪种产品作为<a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:55132709%7D">数据仓库</a>完全取决于具体的应用场景，如果信息获取及分析的能力是你的首要需求，那么无疑ES是一个好的选择。但是即使是将来，ES也无法完全替代NoSQL的其他产品，因为ES在设计上为了优化搜索性能，是做出了其他很多方面的牺牲的。</p><blockquote><ol><li>硬件资源<br>&nbsp;&nbsp;&nbsp;ES是基于Lucene开发的，它的许多局限从根本上都是由Lucene引入的。例如，为了提高性能，Lucene会将同一个term重复地index到各种不同的数据结构中，以支持不同目的的搜索，基于你选用的分析器，最终index数倍于原本的数据大小是有可能的。内存方面，ES的排序和聚合（Aggregation）操作会把几乎所有相关不相关的文档都加载到内存中，一个Query就可以很神奇地吃光所有内存，现在新的Lucene版本优化了基于硬盘的排序，但也仅当你使用SSD的情况下，才不会牺牲过多的搜索性能。其他的问题还包括，大量的增量写操作会导致大量的后台Merge，CPU和硬盘读写都会很容易达到瓶颈。ES确实在横向Scale方面做的很出色，但前提是有足够的预算买硬件。</li></ol></blockquote><blockquote><ol start="2"><li>实时性<br>&nbsp;&nbsp;&nbsp;就在不久前，ES把官网主页上的Near Real-Time Search改成了Real-Time Search，或许是为了更好地宣传，但这不能改变其Near的本质。有多Near呢？默认的设置是1秒，也就是说文档从Index请求到对外可见能够被搜到，最少要1秒钟，强制的，你的网络和CPU再快也不行。这么做是Lucene为了提高写操作的吞吐量而做出的延迟牺牲，当然这个设置是可以手动调整的，但是并不建议你去动它，会极大地影响搜索性能。不同的应用对<a href="https://www.zhihu.com/search?q=%E5%AE%9E%E6%97%B6%E6%80%A7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:55132709%7D">实时性</a>的定义并不一样，这取决于你的需求。</li></ol></blockquote><blockquote><ol start="3"><li>可靠性<br>&nbsp;&nbsp;&nbsp;当数据量达到一定规模之后，你将面临许多在开发阶段无法被暴露出来的问题。例如，在ES的GitHub主页上有30多个Open Issue都是关于Out of Memory的，当然前期充分的压力测试某种程度上可以缓解这个问题，但也可能无限期地推迟产品上线的时间。</li></ol></blockquote><blockquote><ol start="4"><li>安全性<br>&nbsp;&nbsp;&nbsp;这个是ES公司为了挣钱故意的，他们将安全相关的功能单独做成了一个叫做Shield的收费插件，如果你的老板是土豪或者不关心安全那就没有任何问题了，否则，聪明能干的你就需要加班了，不是不能解决，就是麻烦点，能有多安全就不好说了。</li></ol></blockquote><p>可不可以将ES作为主要的或唯一的数据仓库？如果对可靠性的要求不高，答案是可以的。然而，更推荐的做法（也是ES对自己的定位）是将其建立在其他独立的（优化过可靠性一致性正确性的）数据库之上，专门做它擅长的数据分析，处理，以便获取。说到最后又回到预算的问题上了，取决于这个项目的搂钱能力值不值得为了可靠性付出额外的费用，老板没钱的话，那就加班咯，聪明能干的你总能找到解决办法的。以上是我所了解的ES现阶段存在的问题，希望能有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Elasticsearch可以替代NoSQL吗？&quot;&gt;&lt;a href=&quot;#Elasticsearch可以替代NoSQL吗？&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch可以替代NoSQL吗？&quot;&gt;&lt;/a&gt;Elasticsearch可</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch中should和must共存时should失效问题</title>
    <link href="https://lustm.github.io/2021/12/01/Elasticsearch%E4%B8%ADshould%E5%92%8Cmust%E5%85%B1%E5%AD%98%E6%97%B6should%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://lustm.github.io/2021/12/01/Elasticsearch%E4%B8%ADshould%E5%92%8Cmust%E5%85%B1%E5%AD%98%E6%97%B6should%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-01T17:56:43.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">                &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">            # 当must存在的时候，should中的条件是可有可无的，就是must条件满足就行，should的一个都不用满足也可以</span><br><span class="line">            # 当must不存在的时候，should中的条件至少要满足一个</span><br><span class="line">            <span class="attr">&quot;should&quot;</span>: &#123;</span><br><span class="line">                &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;size&quot;</span>: <span class="number">33</span>&#125;&#125;,</span><br><span class="line">                &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;size&quot;</span>: <span class="number">55</span>&#125;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            # 所以当must存在，又想让should的条件至少满足一个地加这个参数</span><br><span class="line">            # 也可以再must&gt;term统计再加一个bool&gt;must&gt;should</span><br><span class="line">            <span class="attr">&quot;minimum_should_match&quot;</span>:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch自定义分词器</title>
    <link href="https://lustm.github.io/2021/12/01/Elasticsearch%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <id>https://lustm.github.io/2021/12/01/Elasticsearch%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E8%AF%8D%E5%99%A8/</id>
    <published>2021-12-01T17:24:55.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-索引的分析"><a href="#1-索引的分析" class="headerlink" title="1 索引的分析"></a>1 索引的分析</h1><p>索引分析: 就是把输入的文本块按照一定的策略进行分解, 并建立倒排索引的过程. 在Lucene的架构中, 这个过程由分析器(analyzer)完成.</p><h2 id="1-1-分析器的组成"><a href="#1-1-分析器的组成" class="headerlink" title="1.1 分析器的组成"></a>1.1 分析器的组成</h2><p>① 字符过滤器(character filter): 比如去除HTML标签、把<code>&amp;</code>替换为<code>and</code>等.</p><p>② 分词器(tokenizer): 按照某种规律, 如根据空格、逗号等, 将文本块进行分解.</p><p>③ 标记过滤器(token filter): 所有被分词器分解的词都将经过token filters的处理, 它可以修改词(如小写化处理)、去掉词(根据某一规则去掉无意义的词, 如”a”, “the”, “的”等), 增加词(如同义词”jump”、”leap”等).</p><blockquote><p>注意: 人们一般将分析器通称为分词器, 并不是相等的关系, 而是包含的关系.</p></blockquote><span id="more"></span><h2 id="1-2-倒排索引的核心原理-normalization"><a href="#1-2-倒排索引的核心原理-normalization" class="headerlink" title="1.2 倒排索引的核心原理-normalization"></a>1.2 倒排索引的核心原理-normalization</h2><p>建立倒排索引时, 会执行<code>normalization</code>(正常化)操作 —— 将拆分的各个单词进行处理, 以提高搜索时命中关联的文档的概率.</p><p><strong>normalization的方式有: 时态转换, 单复数转换, 同义词转换, 大小写转换等.</strong></p><blockquote><p>比如文档中包含<code>His mom likes small dogs</code>:<br>① 在建立索引的时候normalization会对文档进行时态、单复数、同义词等方面的处理;<br>② 然后用户通过近似的<code>mother liked little dog</code>, 也能搜索到相关的文档.</p></blockquote><h1 id="2-ES的默认分词器"><a href="#2-ES的默认分词器" class="headerlink" title="2 ES的默认分词器"></a>2 ES的默认分词器</h1><p>(1) ES中的默认分词器: standard tokenizer, 是标准分词器, 它以单词为边界进行分词. 具有如下功能:</p><blockquote><p>① standard token filter: 去掉无意义的标签, 如&lt;&gt;, &amp;, - 等.<br>② lowercase token filter: 将所有字母转换为小写字母.<br>③ stop token filer(默认被禁用): 移除停用词, 比如”a”、”the”等.</p></blockquote><p>(2) 测试默认分词器:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze<span class="comment">// ES引擎中已有standard分词器, 所以可以不指定index</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;There-is &amp; a DOG&lt;br/&gt; in house&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现, Elasticsearch对text文本进行了分析处理, 结果如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;there&quot;</span>,      <span class="comment">// 分词</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,     <span class="comment">// 起始偏移量</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span>,       <span class="comment">// 结束偏移量</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,  <span class="comment">// 分词的类型</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span>          <span class="comment">// 该分词在文本中的位置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;is&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;a&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 省略其他4项</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-修改分词器"><a href="#3-修改分词器" class="headerlink" title="3 修改分词器"></a>3 修改分词器</h1><p>(1) 创建索引后可以添加新的分词器:</p><blockquote><p>说明: <strong>必须先关闭索引, 添加完成后, 再及时打开索引进行搜索等操作, 否则将出现错误.</strong></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭索引:</span></span><br><span class="line">POST address/_close</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用English停用词token filter</span></span><br><span class="line">PUT address/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;my_token_filter&quot;</span>: &#123;        <span class="comment">// 自定义的分词器名称</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;stopwords&quot;</span>: <span class="string">&quot;_english_&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开索引:</span></span><br><span class="line">POST address/_open</span><br></pre></td></tr></table></figure><p>(2) 使用具有停词功能的分词器进行分词:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET address/_analyze      <span class="comment">// 指定索引</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_token_filter&quot;</span>,   <span class="comment">// 指定要使用的分词器</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;There-is &amp; a DOG&lt;br/&gt; in house&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 返回结果减少了停用词<code>there</code>, <code>is</code>, <code>&amp;</code>, <code>a</code>, <code>in</code>等:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">13</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">16</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;br&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">17</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">19</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;house&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">25</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">30</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-定制分词器"><a href="#4-定制分词器" class="headerlink" title="4 定制分词器"></a>4 定制分词器</h1><h2 id="4-1-向索引中添加自定义的分词器"><a href="#4-1-向索引中添加自定义的分词器" class="headerlink" title="4.1 向索引中添加自定义的分词器"></a>4.1 向索引中添加自定义的分词器</h2><blockquote><p>同样的, 在添加新的分词器之前, 必须先关闭索引, 添加完成后, 再打开索引进行搜索等操作.</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT address/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;char_filter&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;&amp;_to_and&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;mapping&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;mappings&quot;</span>: [<span class="string">&quot;&amp; =&gt; and&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;my_stopwords&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;stopwords&quot;</span>: [<span class="string">&quot;the&quot;</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;my_analyzer&quot;</span>: &#123;    <span class="comment">// 自定义的分析器名称</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;custom&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;char_filter&quot;</span>: [<span class="string">&quot;html_strip&quot;</span>, <span class="string">&quot;&amp;_to_and&quot;</span>], <span class="comment">// 跳过HTML标签, 将&amp;符号转换为&quot;and&quot;</span></span><br><span class="line">                <span class="attr">&quot;tokenizer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>, <span class="string">&quot;my_stopwords&quot;</span>]    <span class="comment">// 转换为小写</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-测试自定义分析器"><a href="#4-2-测试自定义分析器" class="headerlink" title="4.2 测试自定义分析器"></a>4.2 测试自定义分析器</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET address/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_analyzer&quot;</span>,   <span class="comment">// 上面定义的分析器名称</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;There-is &amp; a DOG&lt;br/&gt; in house&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现, 返回的分析结果中已经对大写单词、HTML标签, 以及”&amp;”做了处理.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    <span class="comment">// there和is</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;and&quot;</span>,      <span class="comment">// &amp;被处理成了and</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">9</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// dog、in和house</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-向映射中添加自定义的分词器"><a href="#4-3-向映射中添加自定义的分词器" class="headerlink" title="4.3 向映射中添加自定义的分词器"></a>4.3 向映射中添加自定义的分词器</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT address/_mapping/province</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时查看mapping信息:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET address/_mapping</span><br></pre></td></tr></table></figure><p>发现自定义的分析器已经配置到province上了:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;province&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;area&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;float&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;content&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span> : <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-常见自定义分词器"><a href="#4-4-常见自定义分词器" class="headerlink" title="4.4 常见自定义分词器"></a>4.4 常见自定义分词器</h2><p>使用逗号分词进行查询，类似MySQL的FIND_IN_SET()函数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;comma&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pattern&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;,&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5 常见问题"></a>5 常见问题</h1><p>在修改索引之前, 没有关闭索引, 修改时发生如下错误:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;root_cause&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;illegal_argument_exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;</span>: <span class="string">&quot;Can&#x27;t update non dynamic settings [[index.analysis.analyzer.my_token_filter.type, index.analysis.analyzer.my_token_filter.stopwords]] for open indices [[address/Ci6MJV4sTyuoF4r9aLvVZg]]&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;illegal_argument_exception&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;reason&quot;</span>: <span class="string">&quot;Can&#x27;t update non dynamic settings [[index.analysis.analyzer.my_token_filter.type, index.analysis.analyzer.my_token_filter.stopwords]] for open indices [[address/Ci6MJV4sTyuoF4r9aLvVZg]]&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看本篇第[3]节的说明, 先关闭索引再执行修改操作.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-索引的分析&quot;&gt;&lt;a href=&quot;#1-索引的分析&quot; class=&quot;headerlink&quot; title=&quot;1 索引的分析&quot;&gt;&lt;/a&gt;1 索引的分析&lt;/h1&gt;&lt;p&gt;索引分析: 就是把输入的文本块按照一定的策略进行分解, 并建立倒排索引的过程. 在Lucene的架构中, 这个过程由分析器(analyzer)完成.&lt;/p&gt;
&lt;h2 id=&quot;1-1-分析器的组成&quot;&gt;&lt;a href=&quot;#1-1-分析器的组成&quot; class=&quot;headerlink&quot; title=&quot;1.1 分析器的组成&quot;&gt;&lt;/a&gt;1.1 分析器的组成&lt;/h2&gt;&lt;p&gt;① 字符过滤器(character filter): 比如去除HTML标签、把&lt;code&gt;&amp;amp;&lt;/code&gt;替换为&lt;code&gt;and&lt;/code&gt;等.&lt;/p&gt;
&lt;p&gt;② 分词器(tokenizer): 按照某种规律, 如根据空格、逗号等, 将文本块进行分解.&lt;/p&gt;
&lt;p&gt;③ 标记过滤器(token filter): 所有被分词器分解的词都将经过token filters的处理, 它可以修改词(如小写化处理)、去掉词(根据某一规则去掉无意义的词, 如”a”, “the”, “的”等), 增加词(如同义词”jump”、”leap”等).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 人们一般将分析器通称为分词器, 并不是相等的关系, 而是包含的关系.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    <category term="分词器" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Java操作ElasticSearch实现SimHash比较文章相似度</title>
    <link href="https://lustm.github.io/2021/12/01/Java%E6%93%8D%E4%BD%9CElasticSearch%E5%AE%9E%E7%8E%B0SimHash%E6%AF%94%E8%BE%83%E6%96%87%E7%AB%A0%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
    <id>https://lustm.github.io/2021/12/01/Java%E6%93%8D%E4%BD%9CElasticSearch%E5%AE%9E%E7%8E%B0SimHash%E6%AF%94%E8%BE%83%E6%96%87%E7%AB%A0%E7%9B%B8%E4%BC%BC%E5%BA%A6/</id>
    <published>2021-12-01T17:13:43.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中要求实现相似文本查询的功能，我于是决定用SimHash实现。</p><p>常规思路通常分为以下四步：</p><p>1、实现SimHash算法。</p><p>2、保存文章时，同时保存SimHash为倒排索引。</p><p>3、入库时或使用定时任务，在倒排索引中找到碰撞的SimHash，保存为结果表。</p><p>4、需要查询一篇文章的相似文章时，根据文章ID，查询结果表，找到相似文章。</p><span id="more"></span><p>不过这里有个小问题，如果一篇多次入库的文章的SimHash发生变化，或者文章被删除啥的，结果表可能很难及时更新。</p><p>同时ES刚好很擅长查询与维护倒排索引，所以我想能不能直接交给ES帮我维护SimHash的倒排索引，从而跳过使用结果表呢？</p><p>那么以上逻辑会简化到3步：</p><p>1、实现SimHash算法。</p><p>2、保存文章时，同时在ES中保存SimHash字段（和正文其它字段一起）。</p><p>3、需要查询一篇文章的相似文章时，根据文章ID查到SimHash值，再去ES查询匹配的其它文章ID，不过这里<strong>需要在服务层做个汉明距离的过滤</strong>。</p><p>说干就干，以下是我的实现代码，基于网上已有的算法进行了一些修改，总之给大家抛砖引玉了，如果有做的不好的地方还请大家指出。</p><p>首先添加依赖，使用HanLP分词，Jsoup提供正文HTML标签去除服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hankcs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hanlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>portable-1.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来是SimHash的核心类，我这里直接写死了64位SimHash，判重阈值为3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hankcs.hanlp.HanLP;</span><br><span class="line"><span class="keyword">import</span> com.hankcs.hanlp.dictionary.stopword.CoreStopWordDictionary;</span><br><span class="line"><span class="keyword">import</span> com.hankcs.hanlp.seg.common.Term;</span><br><span class="line"><span class="keyword">import</span> com.springboot.commonUtil.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供SimHash相关的计算服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimHashService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger BIGINT_0 = BigInteger.valueOf(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger BIGINT_1 = BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger BIGINT_2 = BigInteger.valueOf(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger BIGINT_1000003 = BigInteger.valueOf(<span class="number">1000003</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger BIGINT_2E64M1 = BIGINT_2.pow(<span class="number">64</span>).subtract(BIGINT_1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一段正文的simHash</span></span><br><span class="line"><span class="comment">     * 警告：修改该方法，修改HanLp分词结果（如新增停用词），会导致计算出的SimHash发生变化。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 需要计算的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回simHash，64位的0-1字符串。如果文本过短则返回null。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        text = StringUtils.removeHtml(text); <span class="comment">// return Jsoup.parse(text).text();</span></span><br><span class="line">        <span class="keyword">int</span> sumWeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxWeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] bits = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">64</span>];</span><br><span class="line">        List&lt;Term&gt; termList = HanLP.segment(text);</span><br><span class="line">        <span class="keyword">for</span> (Term term : termList) &#123;</span><br><span class="line">            String word = term.word;</span><br><span class="line">            String nature = term.nature.toString();</span><br><span class="line">            <span class="keyword">if</span> (nature.startsWith(<span class="string">&quot;w&quot;</span>) || CoreStopWordDictionary.contains(word)) &#123;</span><br><span class="line">                <span class="comment">// 去除标点符号和停用词</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BigInteger wordHash = getWordHash(word);</span><br><span class="line">            <span class="keyword">int</span> wordWeight = getWordWeight(word);</span><br><span class="line">            <span class="keyword">if</span> (wordWeight == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sumWeight += wordWeight;</span><br><span class="line">            <span class="keyword">if</span> (maxWeight &lt; wordWeight) &#123;</span><br><span class="line">                maxWeight = wordWeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 逐位将计算好的词哈希乘以权重，记录到保存用的数组上。</span></span><br><span class="line">            <span class="comment">// 如果该位哈希为1，则加上对应的权重，反之减去对应的权重。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">                BigInteger bitMask = BIGINT_1.shiftLeft(<span class="number">63</span> - i);</span><br><span class="line">                <span class="keyword">if</span> (wordHash.and(bitMask).signum() != <span class="number">0</span>) &#123;</span><br><span class="line">                    bits[i] += wordWeight;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bits[i] -= wordWeight;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">3</span> * maxWeight &gt;= sumWeight || sumWeight &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="comment">// 文本太短导致哈希不充分，拒绝返回结果（否则可能会有太多碰撞的文档，导致查询性能低下）</span></span><br><span class="line">            <span class="comment">// 暂时定为至少需要凑齐3个大词才允许返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将保存的位统计结果降维，处理成0/1字符串并返回</span></span><br><span class="line">        StringBuilder simHashBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bits[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                simHashBuilder.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                simHashBuilder.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> simHashBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个单词的哈希值</span></span><br><span class="line"><span class="comment">     * 警告：修改该方法会导致计算出的SimHash发生变化。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word 输入的单词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回哈希</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BigInteger <span class="title">getWordHash</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(word)) &#123;</span><br><span class="line">            <span class="keyword">return</span> BIGINT_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] sourceArray = word.toCharArray();</span><br><span class="line">        <span class="comment">// 经过调优，发现左移位数为11-12左右最优</span></span><br><span class="line">        <span class="comment">// 在哈希词语主要为长度2的中文词时，可以避免高位哈希出现明显偏向</span></span><br><span class="line">        <span class="comment">// 反之，如果左移位数太大，则低位哈希将只和词语最后一个字相关</span></span><br><span class="line">        BigInteger hash = BigInteger.valueOf(((<span class="keyword">long</span>) sourceArray[<span class="number">0</span>]) &lt;&lt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : sourceArray) &#123;</span><br><span class="line">            BigInteger chInt = BigInteger.valueOf(ch);</span><br><span class="line">            hash = hash.multiply(BIGINT_1000003).xor(chInt).and(BIGINT_2E64M1);</span><br><span class="line">        &#125;</span><br><span class="line">        hash = hash.xor(BigInteger.valueOf(word.length()));</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个单词的权重。</span></span><br><span class="line"><span class="comment">     * 警告：修改该方法会导致计算出的SimHash发生变化。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word 输入单词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 输出权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getWordWeight</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(word)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = word.length();</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 只有长度为1的词，哈希后位数不够（40位左右），所以权重必须很低，否则容易导致高位哈希全部为0。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (word.charAt(<span class="number">0</span>) &gt;= <span class="number">0x3040</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取SimHash的一部分，转换为short对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHash 原始SimHash字符串，64位0/1字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> part    需要截取的部分编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回Short值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">toShort</span><span class="params">(String simHash, <span class="keyword">int</span> part)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (simHash == <span class="keyword">null</span> || part &lt; <span class="number">0</span> || part &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> startBit = part * <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> endBit = (part + <span class="number">1</span>) * <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(simHash.substring(startBit, endBit), <span class="number">2</span>).shortValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将四段Short格式的SimHash拼接成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashA simHashA，最高位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashB simHashB</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashC simHashC</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashD simHashD，最低位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回64位0/1格式的SimHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toSimHash</span><span class="params">(Short simHashA, Short simHashB, Short simHashC, Short simHashD)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toSimHash(simHashA) + toSimHash(simHashB) + toSimHash(simHashC) + toSimHash(simHashD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一段Short格式的SimHash拼接成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashX 需要转换的Short格式SimHash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回16位0/1格式的SimHash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toSimHash</span><span class="params">(Short simHashX)</span> </span>&#123;</span><br><span class="line">        StringBuilder simHashBuilder = <span class="keyword">new</span> StringBuilder(Integer.toString(simHashX &amp; <span class="number">65535</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">int</span> fill0Count = <span class="number">16</span> - simHashBuilder.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fill0Count; i++) &#123;</span><br><span class="line">            simHashBuilder.insert(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> simHashBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两组SimHash（一组为64位0/1字符串，一组为四组Short），计算汉明距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHash  待比较的SimHash（X），64位0/1字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashA 待比较的SimHash（Y），Short格式，最高位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashB 待比较的SimHash（Y），Short格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashC 待比较的SimHash（Y），Short格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashD 待比较的SimHash（Y），Short格式，最低位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回汉明距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(String simHash, Short simHashA, Short simHashB, Short simHashC, Short simHashD)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (simHash == <span class="keyword">null</span> || simHashA == <span class="keyword">null</span> || simHashB == <span class="keyword">null</span> || simHashC == <span class="keyword">null</span> || simHashD == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hammingDistance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> part = <span class="number">0</span>; part &lt; <span class="number">4</span>; part++) &#123;</span><br><span class="line">            Short simHashX = toShort(simHash, part);</span><br><span class="line">            Short simHashY = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (part) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    simHashY = simHashA;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    simHashY = simHashB;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    simHashY = simHashC;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    simHashY = simHashD;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hammingDistance += hammingDistance(simHashX, simHashY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hammingDistance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个Short格式的SimHash的汉明距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashX 待比较的SimHashX</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashY 待比较的SimHashY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回汉明距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(Short simHashX, Short simHashY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (simHashX == <span class="keyword">null</span> || simHashY == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hammingDistance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> xorResult = (simHashX ^ simHashY) &amp; <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (xorResult != <span class="number">0</span>) &#123;</span><br><span class="line">            xorResult = xorResult &amp; (xorResult - <span class="number">1</span>);</span><br><span class="line">            hammingDistance += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hammingDistance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES索引中需要新增4个SimHash相关的字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;simHashA&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;short&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;simHashB&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;short&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;simHashC&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;short&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;simHashD&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;short&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是ES查询逻辑，根据传入的SimHash，先使用ES找到至少一组SimHash相等的文档，然后在Java代码中比较剩下三组是否满足要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据SimHash，查询相似的文章。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indexNames 需要查询的索引名称（允许多个）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashA   simHashA的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashB   simHashB的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashC   simHashC的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHashD   simHashD的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回相似文章RowKey列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">searchBySimHash</span><span class="params">(String indexNames, Short simHashA, <span class="keyword">short</span> simHashB, <span class="keyword">short</span> simHashC, <span class="keyword">short</span> simHashD)</span> </span>&#123;</span><br><span class="line">        String simHash = SimHashService.toSimHash(simHashA, simHashB, simHashC, simHashD);</span><br><span class="line">        <span class="keyword">return</span> searchBySimHash(indexNames, simHash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据SimHash，查询相似的文章。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indexNames 需要查询的索引名称（允许多个）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> simHash    需要查询的SimHash (格式：64位二进制字符串)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回相似文章RowKey列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">searchBySimHash</span><span class="params">(String indexNames, String simHash)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (simHash == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String scrollId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (scrollId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                SearchResponse response = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollId.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 首次请求，正常查询</span></span><br><span class="line">                    SearchRequest request = <span class="keyword">new</span> SearchRequest(indexNames.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">                    BoolQueryBuilder bqBuilder = QueryBuilders.boolQuery();</span><br><span class="line">                    bqBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;simHashA&quot;</span>, SimHashService.toShort(simHash, <span class="number">0</span>)));</span><br><span class="line">                    bqBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;simHashB&quot;</span>, SimHashService.toShort(simHash, <span class="number">1</span>)));</span><br><span class="line">                    bqBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;simHashC&quot;</span>, SimHashService.toShort(simHash, <span class="number">2</span>)));</span><br><span class="line">                    bqBuilder.should(QueryBuilders.termQuery(<span class="string">&quot;simHashD&quot;</span>, SimHashService.toShort(simHash, <span class="number">3</span>)));</span><br><span class="line">                    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder().size(<span class="number">10000</span>);</span><br><span class="line">                    sourceBuilder.query(bqBuilder);</span><br><span class="line">                    sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">                    sourceBuilder.size(<span class="number">10000</span>);</span><br><span class="line">                    sourceBuilder.timeout(TimeValue.timeValueSeconds(<span class="number">60</span>));</span><br><span class="line">                    sourceBuilder.fetchSource(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;hId&quot;</span>, <span class="string">&quot;simHashA&quot;</span>, <span class="string">&quot;simHashB&quot;</span>, <span class="string">&quot;simHashC&quot;</span>, <span class="string">&quot;simHashD&quot;</span>&#125;, <span class="keyword">new</span> String[]&#123;&#125;);</span><br><span class="line">                    sourceBuilder.sort(<span class="string">&quot;publishDate&quot;</span>, SortOrder.DESC);</span><br><span class="line">                    request.source(sourceBuilder);</span><br><span class="line">                    request.scroll(TimeValue.timeValueSeconds(<span class="number">60</span>));</span><br><span class="line">                    response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 之后请求，走游标查询</span></span><br><span class="line">                    SearchScrollRequest searchScrollRequest = <span class="keyword">new</span> SearchScrollRequest(scrollId).scroll(TimeValue.timeValueMinutes(<span class="number">10</span>));</span><br><span class="line">                    response = client.scroll(searchScrollRequest, RequestOptions.DEFAULT);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span> &amp;&amp; response.getHits().getHits().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 查到的记录必然有一组simHashX与输入相同，但需要合并确认总数是否小于阈值</span></span><br><span class="line">                    <span class="comment">// 很可能有几万的命中，但最终过滤完只剩下几条数据，最终留下ID</span></span><br><span class="line">                    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">                        Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">                        String hId = String.valueOf(sourceAsMap.get(<span class="string">&quot;hId&quot;</span>));</span><br><span class="line">                        Short simHashA = Short.parseShort(sourceAsMap.get(<span class="string">&quot;simHashA&quot;</span>).toString());</span><br><span class="line">                        Short simHashB = Short.parseShort(sourceAsMap.get(<span class="string">&quot;simHashB&quot;</span>).toString());</span><br><span class="line">                        Short simHashC = Short.parseShort(sourceAsMap.get(<span class="string">&quot;simHashC&quot;</span>).toString());</span><br><span class="line">                        Short simHashD = Short.parseShort(sourceAsMap.get(<span class="string">&quot;simHashD&quot;</span>).toString());</span><br><span class="line">                        <span class="keyword">int</span> hammingDistance = SimHashService.hammingDistance(simHash, simHashA, simHashB, simHashC, simHashD);</span><br><span class="line">                        <span class="keyword">if</span> (hammingDistance &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                            System.out.println(hammingDistance + <span class="string">&quot;\t&quot;</span> + hId);</span><br><span class="line">                            resultList.add(sourceAsMap.get(<span class="string">&quot;hId&quot;</span>).toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    scrollId = response.getScrollId();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作中要求实现相似文本查询的功能，我于是决定用SimHash实现。&lt;/p&gt;
&lt;p&gt;常规思路通常分为以下四步：&lt;/p&gt;
&lt;p&gt;1、实现SimHash算法。&lt;/p&gt;
&lt;p&gt;2、保存文章时，同时保存SimHash为倒排索引。&lt;/p&gt;
&lt;p&gt;3、入库时或使用定时任务，在倒排索引中找到碰撞的SimHash，保存为结果表。&lt;/p&gt;
&lt;p&gt;4、需要查询一篇文章的相似文章时，根据文章ID，查询结果表，找到相似文章。&lt;/p&gt;</summary>
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    <category term="文本查重" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E6%96%87%E6%9C%AC%E6%9F%A5%E9%87%8D/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
    <category term="simhash" scheme="https://lustm.github.io/tags/simhash/"/>
    
    <category term="算法" scheme="https://lustm.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch如何让一个字段同时支持精确匹配和模糊检索</title>
    <link href="https://lustm.github.io/2021/12/01/Elasticsearch%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%A3%80%E7%B4%A2/"/>
    <id>https://lustm.github.io/2021/12/01/Elasticsearch%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%A3%80%E7%B4%A2/</id>
    <published>2021-12-01T17:06:19.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<p>需求：如何让ES的某个字段既能支持精确匹配查找，也能支持模糊检索？<br>方法：将字段的mapping设置为如下这种即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fields&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;keyword&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignore_above&quot;</span>:<span class="number">256</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>解释：<br>ElasticSearch 5.0以后，string字段被拆分成两种新的数据类型:<br>Text：会分词，然后根据分词后的内容建立倒排索引（反向索引）<br>不支持聚合<br>keyword：不进行分词，直接直接根据字符串内容建立倒排索引（反向索引）<br>支持聚合</p><p>ElasticSearch字符串将默认被同时映射成text和keyword类型，将会自动创建上面的动态映射(dynamic mappings)，比如上面的name字段，不做任何配置ES就会默认给他映射成两个类型。</p><p>但是如果要对text类型做其他配置，比如加入中文分词器，该如何做呢？若你是使用Spring-data-Elasticsearch，那么有两种办法可以实现这个需求：</p><p>一、对改字段使用@MultiField注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultiField(mainField = @Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;, searchAnalyzer = &quot;ik_smart&quot;), otherFields = &#123;</span></span><br><span class="line"><span class="meta">            @InnerField(type = FieldType.Keyword, suffix = &quot;keyword&quot;) &#125;)</span></span><br></pre></td></tr></table></figure><p>Spring-data-elasticsearch的API文档见：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.5.RELEASE/api/">https://docs.spring.io/spring-data/elasticsearch/docs/3.1.5.RELEASE/api/</a></p><p>二、使用@Mapping注解为Document自定义生成mapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;student&quot;, type = &quot;student&quot;)</span></span><br><span class="line"><span class="meta">@Mapping(mappingPath = &quot;elasticSearch_mapping.json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resource目录下，新建elasticSearch_mapping.json。内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;student&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;search_analyzer&quot;</span>:<span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;fields&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;keyword&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;ignore_above&quot;</span>:<span class="number">256</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除原有的mapping后再次运行程序，新生成的mapping就是json文件中定义的配置，这种方式自由度较高，但对mapping的掌握要求也较高。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;需求：如何让ES的某个字段既能支持精确匹配查找，也能支持模糊检索？&lt;br&gt;方法：将字段的mapping设置为如下这种即可：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;attr&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;attr&quot;&gt;&amp;quot;ignore_above&amp;quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用Logstash同步海量MySQL数据到ES</title>
    <link href="https://lustm.github.io/2021/12/01/%E4%BD%BF%E7%94%A8Logstash%E5%90%8C%E6%AD%A5%E6%B5%B7%E9%87%8FMySQL%E6%95%B0%E6%8D%AE%E5%88%B0ES/"/>
    <id>https://lustm.github.io/2021/12/01/%E4%BD%BF%E7%94%A8Logstash%E5%90%8C%E6%AD%A5%E6%B5%B7%E9%87%8FMySQL%E6%95%B0%E6%8D%AE%E5%88%B0ES/</id>
    <published>2021-12-01T16:56:17.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述</strong></p><p>  在生产业务常有将 <a href="https://cloud.tencent.com/product/cdb?from=10680">MySQL</a> 数据同步到 ES 的需求，如果需要很高的定制化，往往需要开发同步程序用于处理数据。但没有特殊业务需求，官方提供的Logstash 就很有优势了。  在使用 Logstash 我们应先了解其特性，再决定是否使用：</p><ul><li>无需开发，仅需安装配置 Logstash 即可；</li><li>凡是 SQL 可以实现的 Logstash 均可以实现（本就是通过 sql 查询数据）</li><li>支持每次全量同步或按照特定字段（如递增ID、修改时间）增量同步；</li><li>同步频率可控，最快同步频率每分钟一次（如果对实效性要求较高，慎用）；</li><li>不支持被物理删除的数据同步物理删除ES中的数据（可在表设计中增加逻辑删除字段 IsDelete 标识数据删除）。</li></ul><h1 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a><strong>1、安装</strong></h1><p>  前往官网下载 Logstash，下载地址<a href="https://www.elastic.co/downloads/logstash%EF%BC%8Czip%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%A4%A7%E7%BA%A6160M%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E5%8F%AF%E4%BB%A5%E9%80%89%E7%94%A8%E8%BF%99%E4%B8%AA%E4%BB%A3%E7%90%86%E5%9C%B0%E5%9D%80%E4%B8%8B%E8%BD%BD%EF%BC%9Ahttp://mirror.azk8s.cn/elastic/logstash/%EF%BC%89%EF%BC%9B">https://www.elastic.co/downloads/logstash，zip压缩包大约160M（如果下载速度太慢可以选用这个代理地址下载：http://mirror.azk8s.cn/elastic/logstash/）；</a></p><p>  程序目录：</p><ul><li>【windows】G:\ELK\logstash-6.5.4；               </li><li>【linux】/tomcat/logstash/logstash-6.5.4。 下文统一以【程序目录】表示不同环境的安装目录。</li></ul><span id="more"></span><h1 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a><strong>2、配置</strong></h1><h2 id="2-1、新建目录存放配置文件及mysql依赖包"><a href="#2-1、新建目录存放配置文件及mysql依赖包" class="headerlink" title="2.1、新建目录存放配置文件及mysql依赖包"></a><strong>2.1、新建目录存放配置文件及mysql依赖包</strong></h2><p>  在【程序目录】目录（\bin同级）新建mysql目录，将下载好的mysql-connector-java-5.1.34.jar放入此目录；  在【程序目录】\mysql目录新建jdbc.conf文件，此文件将配置<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>连接信息、查询数据sql、分页信息、同步频率等核心信息。  注意事项请查看注释信息。</p><h2 id="2-2、单表同步配置"><a href="#2-2、单表同步配置" class="headerlink" title="2.2、单表同步配置"></a><strong>2.2、单表同步配置</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">stdin &#123;&#125;</span><br><span class="line">jdbc &#123;</span><br><span class="line"><span class="function"><span class="params">type</span> =&gt;</span> <span class="string">&quot;jdbc&quot;</span></span><br><span class="line"> # 数据库连接地址</span><br><span class="line">jdbc_connection_string =&gt; <span class="string">&quot;jdbc:mysql://192.168.1.1:3306/TestDB?characterEncoding=UTF-8&amp;autoReconnect=true&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 数据库连接账号密码；</span></span><br><span class="line"><span class="string">jdbc_user =&gt; &quot;</span>username<span class="string">&quot;</span></span><br><span class="line"><span class="string">jdbc_password =&gt; &quot;</span>pwd<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # MySQL依赖包路径；</span></span><br><span class="line"><span class="string">jdbc_driver_library =&gt; &quot;</span>mysql/mysql-connector-java-<span class="number">5.1</span><span class="number">.34</span>.jar<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # the name of the driver class for mysql</span></span><br><span class="line"><span class="string">jdbc_driver_class =&gt; &quot;</span>com.mysql.jdbc.Driver<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 数据库重连尝试次数</span></span><br><span class="line"><span class="string">connection_retry_attempts =&gt; &quot;</span><span class="number">3</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 判断数据库连接是否可用，默认false不开启</span></span><br><span class="line"><span class="string">jdbc_validate_connection =&gt; &quot;</span><span class="literal">true</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 数据库连接可用校验超时时间，默认3600S</span></span><br><span class="line"><span class="string">jdbc_validation_timeout =&gt; &quot;</span><span class="number">3600</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 开启分页查询（默认false不开启）；</span></span><br><span class="line"><span class="string">jdbc_paging_enabled =&gt; &quot;</span><span class="literal">true</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 单次分页查询条数（默认100000,若字段较多且更新频率较高，建议调低此值）；</span></span><br><span class="line"><span class="string">jdbc_page_size =&gt; &quot;</span><span class="number">500</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # statement为查询数据sql，如果sql较复杂，建议配通过statement_filepath配置sql文件的存放路径；</span></span><br><span class="line"><span class="string"> # sql_last_value为内置的变量，存放上次查询结果中最后一条数据tracking_column的值，此处即为ModifyTime；</span></span><br><span class="line"><span class="string"> # statement_filepath =&gt; &quot;</span>mysql/jdbc.sql<span class="string">&quot;</span></span><br><span class="line"><span class="string">statement =&gt; &quot;</span>SELECT KeyId,TradeTime,OrderUserName,ModifyTime FROM <span class="string">`DetailTab`</span> WHERE ModifyTime&gt;= :sql_last_value order by ModifyTime asc<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 是否将字段名转换为小写，默认true（如果有数据序列化、反序列化需求，建议改为false）；</span></span><br><span class="line"><span class="string">lowercase_column_names =&gt; false</span></span><br><span class="line"><span class="string"> # Value can be any of: fatal,error,warn,info,debug，默认info；</span></span><br><span class="line"><span class="string">sql_log_level =&gt; warn</span></span><br><span class="line"><span class="string"> #</span></span><br><span class="line"><span class="string"> # 是否记录上次执行结果，true表示会将上次执行结果的tracking_column字段的值保存到last_run_metadata_path指定的文件中；</span></span><br><span class="line"><span class="string">record_last_run =&gt; true</span></span><br><span class="line"><span class="string"> # 需要记录查询结果某字段的值时，此字段为true，否则默认tracking_column为timestamp的值；</span></span><br><span class="line"><span class="string">use_column_value =&gt; true</span></span><br><span class="line"><span class="string"> # 需要记录的字段，用于增量同步，需是数据库字段</span></span><br><span class="line"><span class="string">tracking_column =&gt; &quot;</span>ModifyTime<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # Value can be any of: numeric,timestamp，Default value is &quot;</span>numeric<span class="string">&quot;</span></span><br><span class="line"><span class="string">tracking_column_type =&gt; timestamp</span></span><br><span class="line"><span class="string"> # record_last_run上次数据存放位置；</span></span><br><span class="line"><span class="string">last_run_metadata_path =&gt; &quot;</span>mysql/last_id.txt<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 是否清除last_run_metadata_path的记录，需要增量同步时此字段必须为false；</span></span><br><span class="line"><span class="string">clean_run =&gt; false</span></span><br><span class="line"><span class="string"> #</span></span><br><span class="line"><span class="string"> # 同步频率(分 时 天 月 年)，默认每分钟同步一次；</span></span><br><span class="line"><span class="string">schedule =&gt; &quot;</span>* * * * *<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">filter &#123;</span></span><br><span class="line"><span class="string">json &#123;</span></span><br><span class="line"><span class="string">source =&gt; &quot;</span>message<span class="string">&quot;</span></span><br><span class="line"><span class="string">remove_field =&gt; [&quot;</span>message<span class="string">&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"># convert 字段类型转换，将字段TotalMoney数据类型改为float；</span></span><br><span class="line"><span class="string">mutate &#123;</span></span><br><span class="line"><span class="string">convert =&gt; &#123;</span></span><br><span class="line"><span class="string">&quot;</span>TotalMoney<span class="string">&quot; =&gt; &quot;</span>float<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">output &#123;</span></span><br><span class="line"><span class="string">elasticsearch &#123;</span></span><br><span class="line"><span class="string"> # host =&gt; &quot;</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # port =&gt; &quot;</span><span class="number">9200</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 配置ES集群地址</span></span><br><span class="line"><span class="string">hosts =&gt; [&quot;</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">9200</span><span class="string">&quot;, &quot;</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>:<span class="number">9200</span><span class="string">&quot;, &quot;</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span>:<span class="number">9200</span><span class="string">&quot;]</span></span><br><span class="line"><span class="string"> # 索引名字，必须小写</span></span><br><span class="line"><span class="string">index =&gt; &quot;</span>consumption<span class="string">&quot;</span></span><br><span class="line"><span class="string"> # 数据唯一索引（建议使用数据库KeyID）</span></span><br><span class="line"><span class="string">document_id =&gt; &quot;</span>%&#123;KeyId&#125;<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">stdout &#123;</span></span><br><span class="line"><span class="string">codec =&gt; json_lines</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-3、多表同步"><a href="#2-3、多表同步" class="headerlink" title="2.3、多表同步"></a><strong>2.3、多表同步</strong></h2><p>  多表配置和单表配置的区别在于input模块的jdbc模块有几个type，output模块就需对应有几个type；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">stdin &#123;&#125;</span><br><span class="line">jdbc &#123;</span><br><span class="line"> # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span><br><span class="line">type =&gt; <span class="string">&quot;TestDB_DetailTab&quot;</span></span><br><span class="line"></span><br><span class="line"> # 其他配置此处省略，参考单表配置</span><br><span class="line"> # ...</span><br><span class="line"> # ...</span><br><span class="line"> # record_last_run上次数据存放位置；</span><br><span class="line">last_run_metadata_path =&gt; <span class="string">&quot;mysql\last_id.txt&quot;</span></span><br><span class="line"> # 是否清除last_run_metadata_path的记录，需要增量同步时此字段必须为<span class="literal">false</span>；</span><br><span class="line">clean_run =&gt; <span class="literal">false</span></span><br><span class="line"> #</span><br><span class="line"> # 同步频率(分 时 天 月 年)，默认每分钟同步一次；</span><br><span class="line">schedule =&gt; <span class="string">&quot;* * * * *&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">jdbc &#123;</span><br><span class="line"> # 多表同步时，表类型区分，建议命名为“库名_表名”，每个jdbc模块需对应一个type；</span><br><span class="line">type =&gt; <span class="string">&quot;TestDB_Tab2&quot;</span></span><br><span class="line"># 多表同步时，last_run_metadata_path配置的路径应不一致，避免有影响；</span><br><span class="line"> # 其他配置此处省略</span><br><span class="line"> # ...</span><br><span class="line"> # ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">json &#123;</span><br><span class="line"><span class="function"><span class="params">source</span> =&gt;</span> <span class="string">&quot;message&quot;</span></span><br><span class="line">remove_field =&gt; [<span class="string">&quot;message&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line"># output模块的type需和jdbc模块的type一致</span><br><span class="line"><span class="keyword">if</span> [type] == <span class="string">&quot;TestDB_DetailTab&quot;</span> &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line"> # host =&gt; <span class="string">&quot;192.168.1.1&quot;</span></span><br><span class="line"> # port =&gt; <span class="string">&quot;9200&quot;</span></span><br><span class="line"> # 配置ES集群地址</span><br><span class="line">hosts =&gt; [<span class="string">&quot;192.168.1.1:9200&quot;</span>, <span class="string">&quot;192.168.1.2:9200&quot;</span>, <span class="string">&quot;192.168.1.3:9200&quot;</span>]</span><br><span class="line"> # 索引名字，必须小写</span><br><span class="line">index =&gt; <span class="string">&quot;detailtab1&quot;</span></span><br><span class="line"> # 数据唯一索引（建议使用数据库KeyID）</span><br><span class="line">document_id =&gt; <span class="string">&quot;%&#123;KeyId&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> [type] == <span class="string">&quot;TestDB_Tab2&quot;</span> &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line"># host =&gt; <span class="string">&quot;192.168.1.1&quot;</span></span><br><span class="line"># port =&gt; <span class="string">&quot;9200&quot;</span></span><br><span class="line"># 配置ES集群地址</span><br><span class="line">hosts =&gt; [<span class="string">&quot;192.168.1.1:9200&quot;</span>, <span class="string">&quot;192.168.1.2:9200&quot;</span>, <span class="string">&quot;192.168.1.3:9200&quot;</span>]</span><br><span class="line"># 索引名字，必须小写</span><br><span class="line">index =&gt; <span class="string">&quot;detailtab2&quot;</span></span><br><span class="line"># 数据唯一索引（建议使用数据库KeyID）</span><br><span class="line">document_id =&gt; <span class="string">&quot;%&#123;KeyId&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stdout &#123;</span><br><span class="line"><span class="function"><span class="params">codec</span> =&gt;</span> json_lines</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、启动运行"><a href="#3、启动运行" class="headerlink" title="3、启动运行"></a><strong>3、启动运行</strong></h1><p>  在【程序目录】目录执行以下命令启动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【windows】</span><br><span class="line">bin\logstash.bat -f mysql\jdbc.conf</span><br><span class="line">【linux】</span><br><span class="line">nohup ./bin/logstash -f mysql/jdbc_jx_moretable.conf &amp;</span><br></pre></td></tr></table></figure><p>  可新建脚本配置好启动命令，后期直接运行即可。  在【程序目录】\logs目录会有<strong>运行日志</strong>。</p><p><strong>Note：</strong>  5.x/6.X/7.x版本需要jdk8支持，如果默认jdk版本不是jdk8，那么需要在logstash或logstash.lib.sh的行首位置添加两个环境变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> JAVA_CMD=<span class="string">&quot;/usr/tools/jdk1.8.0_162/bin&quot;</span></span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=<span class="string">&quot;/usr/tools/jdk1.8.0_162/&quot;</span></span><br></pre></td></tr></table></figure><p><strong>开机自启动：</strong></p><ul><li>windows开机自启：<ul><li>方案1：使用windows自带的任务计划；</li><li>方案2：nssm注册windows服务，<a href="https://blog.csdn.net/u010887744/article/details/53957713">https://blog.csdn.net/u010887744/article/details/53957713</a></li></ul></li></ul><h1 id="4、问题及解决方案"><a href="#4、问题及解决方案" class="headerlink" title="4、问题及解决方案"></a><strong>4、问题及解决方案</strong></h1><h2 id="4-1、数据同步后，ES没有数据"><a href="#4-1、数据同步后，ES没有数据" class="headerlink" title="4.1、数据同步后，ES没有数据"></a><strong>4.1、数据同步后，ES没有数据</strong></h2><p>  output.elasticsearch模块的index必须是全小写；</p><h2 id="4-2、增量同步后last-run-metadata-path文件内容不改变"><a href="#4-2、增量同步后last-run-metadata-path文件内容不改变" class="headerlink" title="4.2、增量同步后last_run_metadata_path文件内容不改变"></a><strong>4.2、增量同步后last_run_metadata_path文件内容不改变</strong></h2><p>  如果lowercase_column_names配置的不是false，那么tracking_column字段配置的必须是全小写。</p><h2 id="4-3、提示找不到jdbc-driver-library"><a href="#4-3、提示找不到jdbc-driver-library" class="headerlink" title="4.3、提示找不到jdbc_driver_library"></a><strong>4.3、提示找不到jdbc_driver_library</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2032</span> com.mysql.jdbc.Driver not loaded.</span><br><span class="line">Are you sure you<span class="string">&#x27;ve included the correct jdbc driver in :jdbc_driver_library?</span></span><br></pre></td></tr></table></figure><p>  检测配置的地址是否正确，如果是linux环境，注意路径分隔符是“/”，而不是“\”。</p><h2 id="4-4、数据丢失"><a href="#4-4、数据丢失" class="headerlink" title="4.4、数据丢失"></a><strong>4.4、数据丢失</strong></h2><p>  statement配置的sql中，如果比较字段使用的是大于“&gt;”，可能存在数据丢失。  假设当同步完成后last_run_metadata_path存放的时间为2019-01-30 20:45:30，而这时候新入库一条数据的更新时间也为2019-01-30 20:45:30，那么这条数据将无法同步。  解决方案：将比较字段使用 大于等于“&gt;=”。</p><h2 id="4-5、数据重复更新"><a href="#4-5、数据重复更新" class="headerlink" title="4.5、数据重复更新"></a><strong>4.5、数据重复更新</strong></h2><p>  上一个问题“数据丢失”提供的解决方案是比较字段使用“大于等于”，但这时又会产生新的问题。  假设当同步完成后last_run_metadata_path存放的时间为2019-01-30 20:45:30，而数据库中更新时间最大值也为2019-01-30 20:45:30，那么这些数据将重复更新，直到有更新时间更大的数据出现。  当上述特殊数据很多，且长期没有新的数据更新时，会导致大量的数据重复同步到ES。  何时会出现以上情况呢：①比较字段非“自增”；②比较字段是程序生成插入。 <strong>解决方案：</strong></p><ul><li>①比较字段自增保证不重复或重复概率极小（比如使用自增ID或者数据库的timestamp），这样就能避免大部分异常情况了；</li><li>②如果确实存在大量程序插入的数据，其更新时间相同，且可能长期无数据更新，可考虑定期更新数据库中的一条测试数据，避免最大值有大量数据。</li></ul><h2 id="4-6、容灾"><a href="#4-6、容灾" class="headerlink" title="4.6、容灾"></a><strong>4.6、容灾</strong></h2><p>  logstash本身无法集群，我们常使用的组合ELK是通过kafka集群变相实现集群的。  可供选择的处理方式：①使用任务程序推送数据到kafaka，由kafka同步数据到ES，但任务程序本身也需要容灾，并需要考虑重复推送的问题；②将logstash加入守护程序，并辅以第三方监控其运行状态。  具体如何选择，需要结合自身的应用场景了。</p><h2 id="4-7、海量数据同步"><a href="#4-7、海量数据同步" class="headerlink" title="4.7、海量数据同步"></a><strong>4.7、海量数据同步</strong></h2><p>  为什么会慢？logstash分页查询使用临时表分页，每条分页SQL都是将全集查询出来当作临时表，再在临时表上分页查询。这样导致每次分页查询都要对主表进行一次全表扫描。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM (SELECT * FROM <span class="string">`ImageCN1`</span></span><br><span class="line"> WHERE ModifyTime&gt;= <span class="string">&#x27;1970-01-01 08:00:00&#x27;</span></span><br><span class="line"> order by ModifyTime asc) AS <span class="string">`t1`</span></span><br><span class="line"> LIMIT <span class="number">5000</span> OFFSET <span class="number">10000000</span>;</span><br></pre></td></tr></table></figure><p>  数据量太大，首次同步如何安全过渡同步？  可考虑在statement对应的sql中加上分页条件，比如ID在什么范围，修改时间在什么区间，将单词同步的数据总量减少。先少量数据同步测试验证，再根据测试情况修改区间条件启动logstash完成同步。比如将SQL修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line"><span class="string">`ImageCN1`</span> </span><br><span class="line">WHERE</span><br><span class="line">ModifyTime &lt; <span class="string">&#x27;2018-10-10 10:10:10&#x27;</span> AND ModifyTime &gt;= <span class="string">&#x27;1970-01-01 08:00:00&#x27;</span> </span><br><span class="line">ORDER BY</span><br><span class="line">ModifyTime ASC</span><br></pre></td></tr></table></figure><p>  当同步完ModifyTime&lt;’2018-10-10 10:10:10’区间的数据在修改SQL同步剩余区间的数据。  这样需要每次同步后就修改sql，线上运营比较繁琐，是否可以不修改sql，同时保证同步效率呢？SQL我们可以再修改下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line"><span class="string">`ImageCN1`</span> </span><br><span class="line">WHERE</span><br><span class="line">ModifyTime &gt;= <span class="string">&#x27;1970-01-01 08:00:00&#x27;</span> </span><br><span class="line">ORDER BY</span><br><span class="line">ModifyTime ASC </span><br><span class="line">LIMIT <span class="number">100000</span></span><br></pre></td></tr></table></figure><p>  这样就能保证每次子查询的数据量不超过10W条，实际测试发现，数据量很大时效果很明显。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[SQL]USE XXXDataDB;</span><br><span class="line">受影响的行: <span class="number">0</span></span><br><span class="line">时间: <span class="number">0.</span>001s</span><br><span class="line"></span><br><span class="line">[SQL]</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">( SELECT * FROM <span class="string">`ImageCN1`</span> WHERE ModifyTime &gt;= <span class="string">&#x27;1970-01-01 08:00:00&#x27;</span> ORDER BY ModifyTime ASC ) AS <span class="string">`t1`</span> </span><br><span class="line">LIMIT <span class="number">5000</span> OFFSET <span class="number">900000</span>;</span><br><span class="line">受影响的行: <span class="number">0</span></span><br><span class="line">时间: <span class="number">7.</span>229s</span><br><span class="line"></span><br><span class="line">[SQL]</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">( SELECT * FROM <span class="string">`ImageCN1`</span> WHERE ModifyTime &gt;= <span class="string">&#x27;2018-07-18 19:35:10&#x27;</span> ORDER BY ModifyTime ASC LIMIT <span class="number">100000</span> ) AS <span class="string">`t1`</span> </span><br><span class="line">LIMIT <span class="number">5000</span> OFFSET <span class="number">90000</span></span><br><span class="line">受影响的行: <span class="number">0</span></span><br><span class="line">时间: <span class="number">1.</span>778s</span><br></pre></td></tr></table></figure><p>  测试可以看出，SQL不加limit 10W时，越往后分页查询越慢，耗时达到8S，而<strong>加了limit条件的SQL耗时稳定在2S以内</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  在生产业务常有将 &lt;a href=&quot;https://cloud.tencent.com/product/cdb?from=10680&quot;&gt;MySQL&lt;/a&gt; 数据同步到 ES 的需求，如果需要很高的定制化，往往需要开发同步程序用于处理数据。但没有特殊业务需求，官方提供的Logstash 就很有优势了。  在使用 Logstash 我们应先了解其特性，再决定是否使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需开发，仅需安装配置 Logstash 即可；&lt;/li&gt;
&lt;li&gt;凡是 SQL 可以实现的 Logstash 均可以实现（本就是通过 sql 查询数据）&lt;/li&gt;
&lt;li&gt;支持每次全量同步或按照特定字段（如递增ID、修改时间）增量同步；&lt;/li&gt;
&lt;li&gt;同步频率可控，最快同步频率每分钟一次（如果对实效性要求较高，慎用）；&lt;/li&gt;
&lt;li&gt;不支持被物理删除的数据同步物理删除ES中的数据（可在表设计中增加逻辑删除字段 IsDelete 标识数据删除）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、安装&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;  前往官网下载 Logstash，下载地址&lt;a href=&quot;https://www.elastic.co/downloads/logstash%EF%BC%8Czip%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%A4%A7%E7%BA%A6160M%EF%BC%88%E5%A6%82%E6%9E%9C%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E5%8F%AF%E4%BB%A5%E9%80%89%E7%94%A8%E8%BF%99%E4%B8%AA%E4%BB%A3%E7%90%86%E5%9C%B0%E5%9D%80%E4%B8%8B%E8%BD%BD%EF%BC%9Ahttp://mirror.azk8s.cn/elastic/logstash/%EF%BC%89%EF%BC%9B&quot;&gt;https://www.elastic.co/downloads/logstash，zip压缩包大约160M（如果下载速度太慢可以选用这个代理地址下载：http://mirror.azk8s.cn/elastic/logstash/）；&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  程序目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【windows】G:\ELK\logstash-6.5.4；               &lt;/li&gt;
&lt;li&gt;【linux】/tomcat/logstash/logstash-6.5.4。 下文统一以【程序目录】表示不同环境的安装目录。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 429 Too Many Requests circuit_breaking_exception</title>
    <link href="https://lustm.github.io/2021/12/01/ElasticSearch%20429%20Too%20Many%20Requests%20circuit_breaking_exception/"/>
    <id>https://lustm.github.io/2021/12/01/ElasticSearch%20429%20Too%20Many%20Requests%20circuit_breaking_exception/</id>
    <published>2021-12-01T16:01:07.000Z</published>
    <updated>2021-12-29T07:55:16.183Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>错误提示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;statusCode&quot;</span>: <span class="number">429</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Too Many Requests&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;[circuit_breaking_exception] </span></span><br><span class="line"><span class="string">  [parent] Data too large, data for [&lt;http_request&gt;] would be [2087772160/1.9gb], </span></span><br><span class="line"><span class="string">  which is larger than the limit of [1503238553/1.3gb], </span></span><br><span class="line"><span class="string">  real usage: [2087772160/1.9gb],</span></span><br><span class="line"><span class="string">  new bytes reserved: [0/0b], </span></span><br><span class="line"><span class="string">  usages [request=0/0b, fielddata=1219/1.1kb, in_flight_requests=0/0b, accounting=605971/591.7kb], </span></span><br><span class="line"><span class="string">  with &#123; bytes_wanted=2087772160 &amp; bytes_limit=1503238553 &amp; durability=\&quot;PERMANENT\&quot; &#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>重要解决办法<br>关闭circuit检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indices.breaker.type: none</span><br></pre></td></tr></table></figure><p>集群config/jvm.options设置如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br><span class="line"></span><br><span class="line">#-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75</span><br><span class="line">-XX:+UseCMSInitiatingOccupancyOnly</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>以下这些都不用看了</strong></p><p>再尝试其他查询也是如此。经排查，原来是ES默认的缓存设置让缓存区只进不出引起的，具体分析一下。</p><ul><li><p>ES缓存区概述</p><p>ES在查询时，会将索引数据缓存在内存（JVM）中：</p><p><img src="https://raw.githubusercontent.com/lustm/IMG/main/images/794174-20191204133916360-1049841851.png" alt="JVM Heap"></p></li></ul><p>上图是ES的JVM Heap中的状况，可以看到有两条界限：驱逐线 和 断路器。当缓存数据到达驱逐线时，会自动驱逐掉部分数据，把缓存保持在安全的范围内。<br>当用户准备执行某个查询操作时，断路器就起作用了，缓存数据+当前查询需要缓存的数据量到达断路器限制时，会返回Data too large错误，阻止用户进行这个查询操作。</p><p>ES把缓存数据分成两类，FieldData和其他数据，我们接下来详细看FieldData，它是造成我们这次异常的“元凶”。</p><ul><li><p>FieldData</p><p>ES配置中提到的FieldData指的是字段数据。当排序（sort），统计（aggs）时，ES把涉及到的字段数据全部读取到内存（JVM Heap）中进行操作。相当于进行了数据缓存，提升查询效率。</p></li><li><p>监控FieldData</p><p>仔细监控fielddata使用了多少内存以及是否有数据被驱逐是非常重要的。<br>ielddata缓存使用可以通过下面的方式来监控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 对于单个索引使用 &#123;ref&#125;indices-stats.html[indices-stats API]</span><br><span class="line"></span><br><span class="line">GET /_stats/fielddata?fields=*</span><br><span class="line"></span><br><span class="line"># 对于单个节点使用 &#123;ref&#125;cluster-nodes-stats.html[nodes-stats API]</span><br><span class="line"></span><br><span class="line">GET /_nodes/stats/indices/fielddata?fields=*</span><br><span class="line"></span><br><span class="line">#或者甚至单个节点单个索引</span><br><span class="line"></span><br><span class="line">GET /_nodes/stats/indices/fielddata?level=indices&amp;fields=*</span><br><span class="line"></span><br><span class="line"># 通过设置 ?fields=* 内存使用按照每个字段分解了</span><br></pre></td></tr></table></figure></li></ul><p>fielddata中的memory_size_in_bytes表示已使用的内存总数，而evictions（驱逐）为0。且经过一段时间观察，字段所占内存大小都没有变化。由此推断，当下的缓存处于无法有效驱逐的状态。</p><ul><li>Cache配置</li></ul><p>indices.fielddata.cache.size 配置fieldData的Cache大小，可以配百分比也可以配一个准确的数值。cache到达约定的内存大小时会自动清理，驱逐一部分FieldData数据以便容纳新数据。默认值为unbounded无限。<br>indices.fielddata.cache.expire用于约定多久没有访问到的数据会被驱逐，默认值为-1，即无限。expire配置不推荐使用，按时间驱逐数据会大量消耗性能。而且这个设置在不久之后的版本中将会废弃。</p><p>看来，Data too large异常就是由于fielddata.cache的默认值为unbounded导致的了。</p><ul><li>FieldData格式<br>除了缓存取大小之外，我们还可以控制字段数据缓存到内存中的格式。</li></ul><p>在mapping中，我们可以这样设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tag&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:      <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fielddata&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;fst&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于String类型，format有以下几种：<br>paged_bytes (默认)：使用大量的内存来存储这个字段的terms和索引。<br>fst：用<code>FST</code>的形式来存储terms。这在terms有较多共同前缀的情况下可以节约使用的内存，但访问速度上比paged_bytes 要慢。<br>doc_values：fieldData始终存放在disk中，不加载进内存。访问速度最慢且只有在index:no/not_analyzed的情况适用。</p><p>对于数字和地理数据也有可选的format，但相对String更为简单，具体可在api中查看。<br>从上面我们可以得知一个信息：我们除了配置缓存区大小以外，还可以对不是特别重要却量很大的String类型字段选择使用fst缓存类型来压缩大小。</p><ul><li>断路器<br>fieldData的缓存配置中，有一个点会引起我们的疑问：fielddata的大小是在数据被加载之后才校验的。假如下一个查询准备加载进来的fieldData让缓存区超过可用堆大小会发生什么？很遗憾的是，它将产生一个OOM异常。<br>断路器就是用来控制cache加载的，它预估当前查询申请使用内存的量，并加以限制。断路器的配置如下：</li></ul><p>indices.breaker.fielddata.limit：这个 fielddata 断路器限制fielddata的大小，默认情况下为堆大小的60%。<br>indices.breaker.request.limit：这个 request 断路器估算完成查询的其他部分要求的结构的大小， 默认情况下限制它们到堆大小的40%。<br>indices.breaker.total.limit：这个 total 断路器封装了 request 和 fielddata 断路器去确保默认情况下这2个部分使用的总内存不超过堆大小的70%。</p><p>查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/_cluster/settings</span><br></pre></td></tr></table></figure><p>设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;indices.breaker.fielddata.limit&quot;</span>: <span class="string">&quot;60%&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;indices.breaker.request.limit&quot;</span>: <span class="string">&quot;40%&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;indices.breaker.total.limit&quot;</span>: <span class="string">&quot;70%&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>断路器限制可以通过文件 config/elasticsearch.yml 指定，也可以在集群上动态更新：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;indices.breaker.fielddata.limit&quot;</span> : <span class="number">40</span>% </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当缓存区大小到达断路器所配置的大小时会发生什么事呢？答案是：会返回开头我们说的Data too large异常。这个设定是希望引起用户对ES服务的反思，我们的配置有问题吗？是不是查询语句的形式不对，一条查询语句需要使用这么多缓存吗？</p><p>在文件 config/elasticsearch.yml 文件中设置缓存使用回收</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indices.fielddata.cache.size:  40%</span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><p>1.这次Data too large异常是ES默认配置的一个坑，我们没有配置indices.fielddata.cache.size，它就不回收缓存了。缓存到达限制大小，无法往里插入数据。个人感觉这个默认配置不友好，不知ES是否在未来版本有所改进。<br>2.当前fieldData缓存区大小 &lt; indices.fielddata.cache.size当前fieldData缓存区大小+下一个查询加载进来的fieldData &lt; indices.breaker.fielddata.limit fielddata.limit的配置需要比fielddata.cache.size稍大。而fieldData缓存到达fielddata.cache.size的时候就会启动自动清理机制。expire配置不建议使用。<br>3.indices.breaker.request.limit限制查询的其他部分需要用的内存大小。indices.breaker.total.limit限制总（fieldData+其他部分）大小。<br>4.创建mapping时，可以设置fieldData format控制缓存数据格式。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;错误提示&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;statusCode&amp;quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;429&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;Too Many Requests&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;[circuit_breaking_exception] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  [parent] Data too large, data for [&amp;lt;http_request&amp;gt;] would be [2087772160/1.9gb], &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  which is larger than the limit of [1503238553/1.3gb], &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  real usage: [2087772160/1.9gb],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  new bytes reserved: [0/0b], &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  usages [request=0/0b, fielddata=1219/1.1kb, in_flight_requests=0/0b, accounting=605971/591.7kb], &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  with &amp;#123; bytes_wanted=2087772160 &amp;amp; bytes_limit=1503238553 &amp;amp; durability=\&amp;quot;PERMANENT\&amp;quot; &amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要解决办法&lt;br&gt;关闭circuit检查：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;indices.breaker.type: none&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;集群config/jvm.options设置如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-Xms2g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Xmx2g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#-XX:+UseConcMarkSweepGC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:+UseG1GC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:CMSInitiatingOccupancyFraction=75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:+UseCMSInitiatingOccupancyOnly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="搜索引擎" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="elasticsearch" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/"/>
    
    <category term="exception" scheme="https://lustm.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/exception/"/>
    
    
    <category term="elasticsearch" scheme="https://lustm.github.io/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
